namespace Zomp.SyncMethodGenerator;

/// <summary>
/// Contains routines to construct a generated source file with a synchronized method.
/// </summary>
public static class SourceGenerationHelper
{
    internal const string CreateSyncVersionAttributeSource = $$"""
// <auto-generated/>
namespace Zomp.SyncMethodGenerator
{
    #if !SYNC_METHOD_GENERATOR_DISABLE_ATTRIBUTE_GENERATION
    /// <summary>
    /// An attribute that can be used to automatically generate a synchronous version of an async method. Must be used in a partial class.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Method)]
    internal class {{SyncMethodSourceGenerator.CreateSyncVersionAttribute}} : System.Attribute
    {
        /// <summary>
        /// Gets or sets a value indicating whether "#nullable enable" directive will be omitted from generated code. False by default.
        /// </summary>
        public bool {{SyncMethodSourceGenerator.OmitNullableDirective}} { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether <see cref="System.IProgress{T}"/> parameters will be preserved in the generated code. False by default.
        /// </summary>
        public bool {{SyncMethodSourceGenerator.PreserveProgress}} { get; set; }
    }
    #endif
}
""";

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0072:Add missing cases", Justification = "Only deal with selected SyntaxKinds")]
    internal static string GenerateExtensionClass(MethodToGenerate methodToGenerate)
    {
        static string GetKeyword(SyntaxKind sk) => sk switch
        {
            SyntaxKind.PublicKeyword => "public",
            SyntaxKind.InternalKeyword => "internal",
            SyntaxKind.PrivateKeyword => "private",
            SyntaxKind.SealedKeyword => "sealed",
            SyntaxKind.ProtectedKeyword => "protected",
            SyntaxKind.StaticKeyword => "static",
            SyntaxKind.AbstractKeyword => "abstract",
            _ => throw new InvalidOperationException($"{sk} is not supported"),
        };

        // Handle namespaces
        var sbBegin = new StringBuilder();
        var sbEnd = new StringBuilder();
        var i = 0;

        if (!methodToGenerate.IsNamespaceFileScoped)
        {
            foreach (var @namespace in methodToGenerate.Namespaces)
            {
                var indent = new string(' ', 4 * i);
                _ = sbBegin.Append($$"""
{{indent}}namespace {{@namespace}}
{{indent}}{

""");
                _ = sbEnd.Insert(0, $$"""
{{indent}}}

""");
                ++i;
            }
        }

        // Handle classes
        foreach (var parent in methodToGenerate.Parents)
        {
            var indent = new string(' ', 4 * i);

            var modifiers = string.Join(string.Empty, parent.Modifiers.Select(z => GetKeyword((SyntaxKind)z) + " "));
            var parentType = parent.MethodParent switch
            {
                MethodParent.Class => "class",
                MethodParent.Interface => "interface",
                MethodParent.Struct => "struct",
                MethodParent.Record => "record"
                + parent.ClassOrStructKeyword.Kind() switch
                {
                    SyntaxKind.StructKeyword => " struct",
                    SyntaxKind.ClassKeyword => " class",
                    _ => string.Empty,
                },
                _ => throw new NotImplementedException("Cannot handle the parent of the method"),
            };

            var classDeclarationLine = $"{modifiers}partial {parentType} {parent.ParentName}{(parent.TypeParameterListSyntax.IsEmpty ? string.Empty
                : "<" + string.Join(", ", parent.TypeParameterListSyntax) + ">")}";

            _ = sbBegin.Append($$"""
{{indent}}{{classDeclarationLine}}
{{indent}}{

""");
            _ = sbEnd.Insert(0, $$"""
{{indent}}}

""");
            ++i;
        }

        var beforeNamespace = $"""
// <auto-generated/>{(methodToGenerate.DisableNullable ? string.Empty : """

#nullable enable
""")}
""";

        return methodToGenerate.IsNamespaceFileScoped ? $$"""
{{beforeNamespace}}
namespace {{methodToGenerate.Namespaces.First()}};
{{sbBegin}}{{new string(' ', 4 * i)}}{{methodToGenerate.Implementation.Trim()}}
{{sbEnd}}
"""
            : $$"""
{{beforeNamespace}}
{{sbBegin}}{{new string(' ', 4 * i)}}{{methodToGenerate.Implementation.Trim()}}
{{sbEnd}}
""";
    }
}
